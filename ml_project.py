# -*- coding: utf-8 -*-
"""ML Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tV7sRtgKcV_iPo-V-d8g7VwKcui_ICWA
"""

import os
os.environ['KAGGLE_USERNAME'] = 'xneemoox'
os.environ['KAGGLE_KEY'] = 'c372b4e4255bfaf90c1f36be149f2946'

!kaggle datasets download -d mlg-ulb/creditcardfraud

!unzip creditcardfraud

import pandas as pd
df=pd.read_csv('creditcard.csv')
df.head()

df.describe()

df.isnull().sum()

df.columns

print('No Frauds', round(df['Class'].value_counts()[0]/len(df) * 100,2), '% of the dataset')
print('Frauds', round(df['Class'].value_counts()[1]/len(df) * 100,2), '% of the dataset')

# Notice how imbalanced is our original dataset! Most of the transactions are non-fraud. If we use this dataframe as the base for our predictive models and analysis we might get a lot of errors and our algorithms will probably overfit since it will "assume" that most transactions are not fraud.
# But we don't want our model to assume, we want our model to detect patterns that give signs of fraud!

import seaborn as sns
import matplotlib.pyplot as plt
sns.countplot(x='Class', data=df)
plt.title('Class Distributions \n (0: No Fraud , 1: Fraud)', fontsize=14)
plt.show()

from sklearn.preprocessing import StandardScaler, RobustScaler
std_scaler = StandardScaler()
rob_scaler = RobustScaler()
df['scaled_amount'] = rob_scaler.fit_transform(df['Amount'].values.reshape(-1,1))
df['scaled_time'] = rob_scaler.fit_transform(df['Time'].values.reshape(-1,1))
df.drop(['Time','Amount'], axis=1, inplace=True)

scaled_amount = df['scaled_amount']
scaled_time = df['scaled_time']

df.drop(['scaled_amount', 'scaled_time'], axis=1, inplace=True)
df.insert(0, 'scaled_amount', scaled_amount)
df.insert(1, 'scaled_time', scaled_time)

df.head()

